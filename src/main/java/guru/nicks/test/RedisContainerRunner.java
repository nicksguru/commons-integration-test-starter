package guru.nicks.test;

import com.redis.testcontainers.RedisContainer;
import lombok.extern.slf4j.Slf4j;
import org.springframework.boot.test.util.TestPropertyValues;
import org.springframework.context.ApplicationContextInitializer;
import org.springframework.context.support.GenericApplicationContext;

/**
 * Runs Redis (version {@value #IMAGE_TAG}) via TestContainers and sets Spring properties accordingly: host, port
 * (generated by the container dynamically), password, etc. Stops container bean when Spring context gets closed.
 */
@Slf4j
public class RedisContainerRunner implements ApplicationContextInitializer<GenericApplicationContext> {

    public static final String IMAGE_TAG = "redis:8.0.2-alpine";

    @Override
    public void initialize(GenericApplicationContext applicationContext) {
        RedisContainer container = createAndStartContainer(applicationContext);

        // the only reason to register bean is to stop DB container when app context is closed
        applicationContext.registerBean(RedisContainer.class,
                () -> container,
                beanDefinition -> beanDefinition.setDestroyMethodName("stop"));
    }

    private RedisContainer createAndStartContainer(GenericApplicationContext applicationContext) {
        RedisContainer container = new RedisContainer(IMAGE_TAG);
        container.start();

        TestPropertyValues testProps = TestPropertyValues.of(
                "spring.redis.scheme=redis",
                "spring.redis.trustAnyCertificate=true",
                "spring.redis.connectionMinimumIdleSize=3",
                "spring.redis.database=0",
                "spring.redis.host=" + container.getHost(),
                "spring.redis.port=" + container.getRedisPort(),
                "spring.redis.password=");

        log.debug("Assigning application properties for running tests: {}", testProps);
        testProps.applyTo(applicationContext);

        return container;
    }

}
