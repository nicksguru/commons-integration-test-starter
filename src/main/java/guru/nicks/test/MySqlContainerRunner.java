package guru.nicks.test;

import lombok.extern.slf4j.Slf4j;
import org.springframework.boot.test.util.TestPropertyValues;
import org.springframework.context.ApplicationContextInitializer;
import org.springframework.context.support.GenericApplicationContext;
import org.testcontainers.containers.JdbcDatabaseContainer;
import org.testcontainers.containers.MySQLContainerProvider;

/**
 * Runs MySQL (version {@value #MYSQL_VERSION}) via TestContainers and sets Spring datasource properties accordingly:
 * URL, driver name etc. (DB name and credentials are generated by the container). Stops container bean when Spring
 * context gets closed.
 */
@Slf4j
public class MySqlContainerRunner implements ApplicationContextInitializer<GenericApplicationContext> {

    public static final String MYSQL_VERSION = "9.3.0";

    @Override
    public void initialize(GenericApplicationContext applicationContext) {
        JdbcDatabaseContainer<?> container = createAndStartContainer(applicationContext);

        // the only reason to register bean is to stop DB container when app context is closed
        applicationContext.registerBean(JdbcDatabaseContainer.class,
                () -> container,
                beanDefinition -> beanDefinition.setDestroyMethodName("stop"));
    }

    private JdbcDatabaseContainer<?> createAndStartContainer(GenericApplicationContext applicationContext) {
        JdbcDatabaseContainer<?> container = new MySQLContainerProvider().newInstance(MYSQL_VERSION);
        container.start();

        TestPropertyValues testProps = TestPropertyValues.of(
                "spring.test.database.replace=none",
                "spring.datasource.url=" + container.getJdbcUrl(),
                "spring.datasource.username=" + container.getUsername(),
                "spring.datasource.password=" + container.getPassword(),
                "spring.datasource.driver-class-name=" + container.getDriverClassName());

        log.debug("Assigning application properties for running tests: {}", testProps);
        testProps.applyTo(applicationContext);

        return container;
    }

}
